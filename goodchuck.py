# -*- coding: utf-8 -*-
"""GoodChuck.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/********************
"""

pip install Flask firebase-admin boto3

from flask import Flask, request, jsonify
from firebase_admin import credentials, firestore, initialize_app
import boto3
import os

app = Flask(__name__)

# Initialize Firebase Admin
cred = credentials.Certificate('path/to/serviceAccountKey.json')
initialize_app(cred)
db = firestore.client()
report_ref = db.collection('reports')

# Initialize AWS S3
s3 = boto3.client('s3', aws_access_key_id='GOOD_CHUCCK_SW3',
                  aws_secret_access_key='GOOD_CHUCK_AWS_SECRET_KEY',
                  region_name='CHUCKTOWN_AWS_REGION')
BUCKET_NAME = 'chuck-real-good-s3-bucket-name'

@app.route('/report', methods=['POST'])
def submit_report():
    try:
        email = request.form['email']
        password = request.form['password']  # In a real app, you'd authenticate user
        damage_type = request.form['damage_type']
        file = request.files['photo']

        # Upload photo to AWS S3
        s3.upload_fileobj(file, BUCKET_NAME, file.filename)
        photo_url = f"https://{BUCKET_NAME}.s3.amazonaws.com/{file.filename}"

        # Get GPS location (you'll need to pass these from the frontend)
        latitude = float(request.form['latitude'])
        longitude = float(request.form['longitude'])

        # Save report to Firestore
        report_ref.add({
            'email': email,
            'damage_type': damage_type,
            'photo_url': photo_url,
            'location': firestore.GeoPoint(latitude, longitude),
            'upvotes': 0,
            'downvotes': 0,
            'timestamp': firestore.SERVER_TIMESTAMP
        })

        return jsonify({"success": True, "message": "Report submitted successfully"}), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400

@app.route('/upvote/<report_id>', methods=['POST'])
def upvote_report(report_id):
    try:
        report = report_ref.document(report_id)
        report.update({
            'upvotes': firestore.Increment(1)
        })
        return jsonify({"success": True, "message": "Upvoted successfully"}), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400

@app.route('/downvote/<report_id>', methods=['POST'])
def downvote_report(report_id):
    try:
        report = report_ref.document(report_id)
        report.update({
            'downvotes': firestore.Increment(1)
        })
        return jsonify({"success": True, "message": "Downvoted successfully"}), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400

@app.route('/reports', methods=['GET'])
def get_reports():
    try:
        reports = report_ref.stream()
        report_list = []
        for report in reports:
            report_list.append(report.to_dict())
        return jsonify(report_list), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True)
